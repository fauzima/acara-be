generator client {
  provider = "prisma-client-js"
  output = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EventCategory {
  Konser
  Festival
  StandUpComedy
}

enum EventLocation {
  Jakarta
  Lampung
  Surakarta
  Banten
  Bandung
}

enum OrderStatus {
  Pending
  Paid
  Cancelled
  Expired
}

model User {
  id         String       @id @default(uuid())
  name       String       @unique
  email      String       @unique
  password   String
  avatar     String?
  refCode    String
  inputRef   String?
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  UserPoint  UserPoint[]
  UserCoupon UserCoupon[]
  Order      Order[]
  Review     Review[]
}

model Promotor {
  id         String   @id @default(uuid())
  name       String   @unique
  email      String   @unique
  password   String
  avatar     String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Event      Event[]
}

model Event {
  id          String        @id @default(uuid())
  title       String
  description String
  category    EventCategory
  location    EventLocation
  venue       String
  date        DateTime      @db.Date
  time        DateTime      @db.Time()
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  promotorId  String
  promotor    Promotor      @relation(fields: [promotorId], references: [id])
  Ticket      Ticket[]
  Order       Order[]
  Review      Review[]
}

model Ticket {
  id           String         @id @default(uuid())
  category     String
  desc         String
  seats        Int
  price        BigInt
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  eventId      String
  event        Event          @relation(fields: [eventId], references: [id])
  OrderDetails OrderDetails[]
}

model UserPoint {
  id         String   @id @default(uuid())
  point      Int      @default(10000)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiredAt  DateTime @db.Date
  isRedeemed Boolean  @default(false)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model UserCoupon {
  id         String   @id @default(uuid())
  percentage Int      @default(10)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiredAt  DateTime @db.Date
  isRedeemed Boolean  @default(false)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Order {
  id           Int            @id @default(autoincrement())
  totalPrice   Int
  finalPrice   Int
  status       OrderStatus    @default(Pending)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  eventId      String
  event        Event          @relation(fields: [eventId], references: [id])
  paymentProof String
  OrderDetails OrderDetails[]
}

model OrderDetails {
  id        String   @id @default(uuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  qty       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id          String   @id @default(uuid())
  description String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
}
