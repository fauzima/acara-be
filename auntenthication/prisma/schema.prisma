generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CategoryEvent {
  Konser
  Festival
  StandUpComedy
}

enum LocationEvent {
  Jakarta
  Lampung
  Surakarta
  Banten
  Bandung
}

enum StatusOrder {
  Pending
  Paid
  Cancel
}

model User {
  id          String        @id @default(uuid())
  username    String        @unique
  email       String        @unique
  password    String
  avatar      String?
  refCode     String
  inputRef    String?
  isVerify    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  User_Point  User_Point[]
  User_Coupon User_Coupon[]
  Order       Order[]
  Review      Review[]
}

model Promotor {
  id       String  @id @default(uuid())
  name     String
  email    String
  password String
  avatar   String?
  isVerify Boolean @default(false)
  Event    Event[]
}

model Event {
  id          String        @id @default(uuid())
  title       String
  description String
  category    CategoryEvent
  location    LocationEvent
  venue       String
  date        DateTime      @db.Date
  time        DateTime      @db.Time()
  promotorId  String
  promotor    Promotor      @relation(fields: [promotorId], references: [id])
  Ticket      Ticket[]
  Order       Order[]
  Review      Review[]
}

model Ticket {
  id            String          @id @default(uuid())
  category      String
  desc          String
  seats         Int
  price         BigInt
  eventId       String
  event         Event           @relation(fields: [eventId], references: [id])
  Order_details Order_details[]
}

model User_Point {
  id        String   @id @default(uuid())
  point     Int      @default(10000)
  createdAt DateTime @default(now())
  expireAt  DateTime @db.Date
  isRedeem  Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model User_Coupon {
  id         String   @id @default(uuid())
  isRedeem   Boolean  @default(false)
  percentage Int      @default(10)
  createdAt  DateTime @default(now())
  expireAt   DateTime @db.Date
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Order {
  id            Int             @id @default(autoincrement())
  total_price   Int
  final_price   Int
  status        StatusOrder     @default(Pending)
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  eventId       String
  event         Event           @relation(fields: [eventId], references: [id])
  payment_proof String
  Order_details Order_details[]
}

model Order_details {
  id       String @id @default(uuid())
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  qty      Int
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id])
}

model Review {
  id          String @id @default(uuid())
  description String
  rating      Int
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  eventId     String
  event       Event  @relation(fields: [eventId], references: [id])
}
